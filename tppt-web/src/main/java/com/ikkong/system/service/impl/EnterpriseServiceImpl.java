package com.ikkong.system.service.impl;

import java.util.List;

import com.ikkong.core.base.service.impl.BaseService;
import com.ikkong.core.dao.Db;
import com.ikkong.core.toolbox.Record;
import com.ikkong.core.toolbox.support.BladePage;
import com.ikkong.system.model.Enterprise;
import com.ikkong.system.service.EnterpriseService;

/**
 * Generated by Blade. 2017-11-07 17:36:57
 */
public class EnterpriseServiceImpl extends BaseService<Enterprise> implements EnterpriseService {

	public List<Record> countByEntHolderType(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(" select ah.type,dd.`NAME` as name,count(a.id ) num");
		sql.append(" from glpt_enterprise a");
		sql.append(" join glpt_enterprises_holders ah on a.id=ah.enterpriseid");
		sql.append(" left join glpt_building b on a.buildingid=b.id");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,a.fd)=d.ID");
		sql.append(" join tfw_dict dd on ah.type=dd.NUM and dd.`CODE`='10001'");
		sql.append(" where 1=1");
		 if(record.containsKey("areaid")){
		 sql.append(" and d.ID=#{areaid}");
		 }
		sql.append(" group by ah.type");

		// JFinalBeetlSql.dao().execute(p, clazz)

		return Db.init().selectList(sql.toString(), record);

	}

	public List<Record> countByEntRelocateType(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(" select dd.`NAME` name,count(a.id ) num");
		sql.append(" from glpt_enterprise a");
		sql.append(" left join glpt_building b on a.buildingid=b.id");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,a.fd)=d.ID");
		sql.append(" join tfw_dict dd on a.relocatetype=dd.NUM and dd.`CODE`='10007'");
		sql.append(" where d.ID=#{areaid}");
		// if(record.containsKey("name")){
		// sql.append(" and a.name like '%#{name}%'");
		// }
		sql.append(" group by dd.NAME");
		return Db.init().selectList(sql.toString(), record);
	}
	
	

	public List<Record> countByOwnershipType(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(" select dd.`NAME` name,count(a.id ) num");
		sql.append(" from glpt_enterprise a");
		sql.append(" left join glpt_building b on a.buildingid=b.id");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,a.fd)=d.ID");
		sql.append(" join tfw_dict dd on a.ownershiptype=dd.NUM and dd.`CODE`='10006'");
		sql.append(" where 1=1");
		 if(record.containsKey("areaid")){
		 sql.append(" and d.ID=#{areaid}");
		 }
		sql.append(" group by dd.NAME");
		return Db.init().selectList(sql.toString(), record);
	}


	@Override
	public List<Record> queryEntList(Record record) {
		StringBuilder sql = formatEntQuerySQL(record);

		sql.append(" limit 0,30;");

		return Db.init().selectList(sql.toString(), record);
	}

	public List<Record> queryEntListNoLimit(Record record){
		StringBuilder sql = formatEntQuerySQL(record);

		return Db.init().selectList(sql.toString(), record);
	}

	public StringBuilder formatEntQuerySQL(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(
				" select a.id,a.name,IFNULL(a.longitude,b.longitude) as longitude,IFNULL(a.latitude,b.latitude) as latitude ,a.buildingid");
		sql.append(" from glpt_enterprise a");
		sql.append(" left join glpt_building b on a.buildingid=b.id");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,a.fd)=d.ID");
		sql.append(" where 1=1");
		if (record.containsKey("areaid")) {
			sql.append(" and  d.ID=#{areaid}");
		}
		if (record.containsKey("name")) {
			sql.append(" and  a.name like concat('%',#{name},'%')");
		}
		if (record.containsKey("employees")) {
			sql.append(" and  a.employees>=#{employees}");
		}
		if (record.containsKey("totleinput")) {
			sql.append(" and a.id in(");
			sql.append(" 			select enterpriseid from glpt_enterprises_management em ");
			sql.append(" 			where em.totleinput>=convert(#{totleinput},decimal) and em.taxyear=#{year}");
			sql.append(" 		)");
		}
		return sql;
	}
	

	@Override
	public List<Record> queryEntEconomicDataList(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(" select ");
		sql.append(" sum(landarea) landarea,");
		sql.append(" sum(buildingquantity) buildingquantity,");
		sql.append(" sum(employees) employees,(select count(0) from V_area_enterprise v where v.areaid=e.areaid) as entNUM ");
		sql.append(" from glpt_area_ext e ");
		sql.append(" where 1=1");
		 if(record.containsKey("areaid")){
		 sql.append(" and e.areaid=#{areaid}");
		 }
		if (record.containsKey("year")) {
			sql.append(" and  `year`=#{year}");
		}

		return Db.init().selectList(sql.toString(), record);
	}

	/**
	 * 查询建筑内企业信息
	 * 
	 * @param record
	 * @return
	 */
	@Override
	public List<Record> queryEntListByBuilding(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(" select a.id,a.name,m.totleinput");
		sql.append(" from glpt_enterprise a");
		sql.append("  join glpt_building b on a.buildingid=b.id");
		sql.append(" left join glpt_enterprises_management m on a.id=m.enterpriseid  and m.taxyear=#{year}");
		sql.append(" where b.id=#{buildingid}");

		return Db.init().selectList(sql.toString(), record);
	}

	/**
	 * 获取楼宇经济指标
	 * 
	 * @param record
	 * @return
	 */
	public Record queryEntEconomicByBuildingid(Record record) {

		StringBuilder sql = new StringBuilder();
		sql.append(" select b.buildname,count(0) num,SUM(IFNULL(em.totleinput,0)) totleinput,coveredarea ");
		sql.append(" from glpt_building b");
		sql.append(" left join glpt_enterprise e on b.id=e.buildingid");
		sql.append(" left join glpt_enterprises_management em on e.id=em.enterpriseid and em.taxyear=#{year}");
		sql.append(" where b.id=#{buildingid}");

		return Db.init().selectOne(sql.toString(), record);
	}

	/**
	 * 1.2.3 企业规模统计 按营业收入区间进行归类统计
	 * 
	 * @param record
	 * @return
	 */
	public List<Record> statisticEntByInput(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append(" select sum(if(em.totleinput<10,1,0)) lt10,");
		sql.append(" sum(if(em.totleinput>=10 and em.totleinput<50,1,0)) lt50,");
		sql.append(" sum(if(em.totleinput>=50 and em.totleinput<100,1,0)) lt100,");
		sql.append(" sum(if(em.totleinput>=100 and em.totleinput<500,1,0)) lt500,");
		sql.append(" sum(if(em.totleinput>=500 and em.totleinput<1000,1,0)) lt1000,");
		sql.append(" sum(if(em.totleinput>=1000 and em.totleinput<10000,1,0)) lt10000,");
		sql.append(" sum(if(em.totleinput>=10000,1,0)) gt10000,");
		sql.append(" d.FULLNAME");
		sql.append(" from glpt_enterprise e ");
		sql.append(" join glpt_enterprises_management em  on e.id=em.enterpriseid");
		sql.append(" left join glpt_building b on e.buildingid=b.id");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,e.fd)=d.ID");
		sql.append(" where em.taxyear=#{year} ");
		if (record.containsKey("areaid")) {
			sql.append(" and d.ID=#{areaid} ");
		}
		if (record.containsKey("buildingid")) {
			sql.append(" and b.id=#{buildingid}");
		}

		sql.append(" group by d.FULLNAME");

		return Db.init().selectList(sql.toString(), record);
	}
	
	/**
	 * 1.2.5	行业类型统计
	 * 按经营类型进行归类统计
	 * @param record
	 * @return
	 */
	public List<Record> statisticEntByBusinessType(Record record) {
		StringBuilder sql = new StringBuilder();
		sql.append("select d.FULLNAME ");
		List<Record> dictList=DictUtils.getDictByCode("10021");
		if(dictList!=null&&dictList.size()>0){
			for(Record dict :dictList){
				if(dict.get("num").toString().equals("0"))
					continue;
				sql.append(",sum(if(FIND_IN_SET("+dict.get("num").toString()+",e.businesstype)>0,1,0)) as '"+dict.get("name").toString()+"'");
			}
		}
		//sql.append(" d.FULLNAME");
		sql.append(" from glpt_enterprise e ");
		sql.append(" left join glpt_building b on e.buildingid=b.id");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,e.fd)=d.ID");
		sql.append(" where 1=1 ");
		if (record.containsKey("areaid")) {
			sql.append(" and d.ID=#{areaid} ");
		}
		if (record.containsKey("buildingid")) {
			sql.append(" and b.id=#{buildingid}");
		}

		sql.append(" group by d.FULLNAME");
		return Db.init().selectList(sql.toString(), record);
	}
	
	
	
	/**
	 * 
	 */
	public List<Record> queryEntToCollectCredit(int start, int size){
		StringBuilder sql = new StringBuilder();
		sql.append("select a.id,a.`name`,bu.areaid,b.adress as address,b.id as cid ");
		sql.append(" from glpt_enterprise a ");
		sql.append(" left join glpt_enterprise_credit b on a.id=b.entid ");
		sql.append(" left join glpt_building bu on a.buildingid=bu.id ");
		sql.append(" order by id DESC ");
		sql.append(" limit "+start+","+size+"; ");
		return Db.init().selectList(sql.toString(), new Object[]{});
	}
	
	
	/**
	 * 修改区外注册预警状态
	 * @param enterprise
	 */
	public void updateOutRegistType(Enterprise enterprise){
		StringBuilder sql = new StringBuilder();
		sql.append("update glpt_enterprise");
		sql.append(" set outregist=#{outregist}");
		sql.append(" ,checkdate=now() ");
		sql.append(" ,checkstatus=0 ");
		sql.append(" where id=#{id} ");
		Db.init().update(sql.toString(), enterprise);
	}
	/**
	 * 批量更新企业楼宇信息
	 */
	public void updateBuildingidByBat(String ids,String buildingid){
		StringBuilder sql = new StringBuilder();
		sql.append("update glpt_enterprise");
		sql.append(" set buildingid="+buildingid);
		sql.append(" where id in ("+ids+") ");
		Db.init().update(sql.toString(),new Object[]{});
	}
	
	
	/**
	 * 1.2.6	企业营收查询
	 * 按片区、楼宇、年份、营收等查询
	 * @param record
	 * @return
	 */
//	public Record searchEntByInput(Record record) {
//		StringBuilder sql = new StringBuilder();
//		sql.append(" select d.FULLNAME ,b.buildname,e.`name`,e.id,em.taxyear,em.totleinput ");
//		sql.append(" from glpt_enterprise e ");
//		sql.append(" join glpt_enterprises_management em  on e.id=em.enterpriseid");
//		sql.append(" join glpt_building b on e.buildingid=b.id");
//		sql.append(" join tfw_dept d on b.areaid=d.ID");
//		sql.append(" where em.taxyear=#{year} ");
//		if (record.containsKey("areaid")) {
//			sql.append(" and d.ID=#{areaid} ");
//		}
//		if (record.containsKey("buildingid")) {
//			sql.append(" and b.id=#{buildingid}");
//		}
//		if (record.containsKey("totleinput_gt")) {
//			sql.append(" and em.totleinput>=#{totleinput_gt} ");
//		}
//		if (record.containsKey("totleinput_lt")) {
//			sql.append(" and em.totleinput<=#{totleinput_lt} ");
//		}
//
//		sql.append(" group by d.FULLNAME");
//
//		return Db.init().selectOne(sql.toString(), record);
//	}
	
//	/**
//	 * 1.2.7	企业纳税查询
//	 * 按片区、楼宇、年份、类型（国税/地税）等查询
//	 * @param record
//	 * @return
//	 */
//	public Record searchEntByTaxType(Record record) {
//		StringBuilder sql = new StringBuilder();
//		sql.append(" select d.FULLNAME ,b.buildname,e.`name`,e.id,em.taxyear,em.statetax,em.localtax ");
//		sql.append(" from glpt_enterprise e ");
//		sql.append(" join glpt_enterprises_management em  on e.id=em.enterpriseid");
//		sql.append(" join glpt_building b on e.buildingid=b.id");
//		sql.append(" join tfw_dept d on b.areaid=d.ID");
//		sql.append(" where em.taxyear=#{year} ");
//		if (record.containsKey("areaid")) {
//			sql.append(" and d.ID=#{areaid} ");
//		}
//		if (record.containsKey("buildingid")) {
//			sql.append(" and b.id=#{buildingid}");
//		}
//		if (record.containsKey("totleinput_gt")) {
//			sql.append(" and em.totleinput>=#{totleinput_gt} ");
//		}
//		if (record.containsKey("totleinput_lt")) {
//			sql.append(" and em.totleinput<=#{totleinput_lt} ");
//		}
//
//		sql.append(" group by d.FULLNAME");
//
//		return Db.init().selectOne(sql.toString(), record);
//	}
	
	/**
	 * 1.2.8	企业查询
	 * 按片区、楼宇、企业员工数、营业收入、企业名称等
	 * @param record
	 * @return
	 */
//	public Record searchEntInfo(Record record) {
//		StringBuilder sql = new StringBuilder();
//		sql.append(" select d.FULLNAME ,b.buildname,e.`name`,e.id,em.taxyear,em.totleinput ");
//		sql.append(" from glpt_enterprise e ");
//		sql.append(" join glpt_enterprises_management em  on e.id=em.enterpriseid");
//		sql.append(" join glpt_building b on e.buildingid=b.id");
//		sql.append(" join tfw_dept d on b.areaid=d.ID");
//		sql.append(" where em.taxyear=#{year} ");
//		if (record.containsKey("areaid")) {
//			sql.append(" and d.ID=#{areaid} ");
//		}
//		if (record.containsKey("buildingid")) {
//			sql.append(" and b.id=#{buildingid}");
//		}
//		if (record.containsKey("totleinput_gt")) {
//			sql.append(" and em.totleinput>=#{totleinput_gt} ");
//		}
//		if (record.containsKey("totleinput_lt")) {
//			sql.append(" and em.totleinput<=#{totleinput_lt} ");
//		}
//
//		sql.append(" group by d.FULLNAME");
//
//		return Db.init().selectOne(sql.toString(), record);
//	}


	public List<Record> querylowProdEntListNoLimit(Record record){
		StringBuilder sql = formatlowProdEntQuerySQL(record);

		return Db.init().selectList(sql.toString(), record);
	}

	public StringBuilder formatlowProdEntQuerySQL(Record record) {
		StringBuilder sql = new StringBuilder();

		String field=null;
		if(record.getInt("counttype").equals(1)){
			field="totleoutput";
		}else{
			field="annualtotal";
		}

		sql.append(
				" select e.id,IFNULL(e.longitude,b.longitude) as longitude,IFNULL(e.latitude,b.latitude) as latitude");
		sql.append(" from glpt_enterprise e ");
		sql.append(" left join glpt_building b on e.buildingid=b.id");
		sql.append(" join glpt_enterprises_management em on e.id=em.enterpriseid");
		sql.append(" left join tfw_dept d on ifnull(b.areaid,e.fd)=d.ID");
		sql.append(" where  em."+field+">0 ");
		if (record.containsKey("year")) {
			sql.append(" and  em.taxyear=#{year}");
		}
		if (record.containsKey("areaid")) {
			sql.append(" and  d.ID=#{areaid}");
		}
		if (record.containsKey("min")&&record.containsKey("max")) {
			sql.append(" and  em."+field+"/(e.areacovered*0.0015) BETWEEN #{min} and #{max}");
		}else if (record.containsKey("min")) {
			sql.append(" and em."+field+"/(e.areacovered*0.0015) >= #{min}");
		}else if (record.containsKey("max")) {
			sql.append(" and em."+field+"/(e.areacovered*0.0015) <= #{max}");
		}


		return sql;
	}


}
