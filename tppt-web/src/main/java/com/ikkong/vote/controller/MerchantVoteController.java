package com.ikkong.vote.controller;

import com.ikkong.core.base.BaseController;
import com.ikkong.core.toolbox.Record;
import com.ikkong.vote.model.Event;
import com.ikkong.vote.model.Merchant;
import com.ikkong.vote.service.EventService;
import com.ikkong.vote.service.MerchantService;
import com.ikkong.vote.service.impl.EventServiceImpl;
import com.ikkong.vote.service.impl.MerchantServiceImpl;
import com.jfinal.log.Log;
import org.apache.commons.lang3.StringUtils;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Random;

/**
 * Generated by Blade.
 * 2016-10-08 15:59:45
 */
public class MerchantVoteController extends BaseController {
    Log logger = Log.getLog(MerchantVoteController.class);
    private static String CODE = "merchantVote";
    private static String PERFIX = "t_merchant";
    private static String LIST_SOURCE = "Merchant.list";
    private static String BASE_PATH = "/merchantvote/";

    EventService eventService = new EventServiceImpl();
    MerchantService merchantService = new MerchantServiceImpl();

    public void index() {
        String eid=getPara("eid","");
        Event event=eventService.findById(eid);
        if(event!=null) {
            setAttr("eid", eid);
            setAttr("title", event.getName()+"-选手人气管理");
        }else{

            setAttr("title", "选手人气管理");
        }
        setAttr("code", CODE);
        render(BASE_PATH + "merchant.html");
    }


    public void list() {
        Record record = Record.create();
        if(!isAdmin()) {
            record.set("deptid", getDeptId());
        }
        String status = getPara("status", "");
        String keystr = getPara("keystr", "");
        String eid = getPara("eid", "");
        if (StringUtils.isNotEmpty(eid)) {
            record.set("eventid", eid);
        }
        if (StringUtils.isNotEmpty(keystr)) {
            try {
                keystr = java.net.URLDecoder.decode(keystr, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }
        if (!"00".equals(status)) {
            record.set("status", status);
        }
        record.set("keystr", keystr.trim());

        String sidx = getPara("sidx", " eventid,totlevotes desc,indexno");
        String sord = getPara("sord", "");
        record.set("sortfield",sidx);
        record.set("audit_status",1);
        record.set("sortDirection",sord);
        Object grid = paginate(LIST_SOURCE, record);
        renderJson(grid);
    }


    public void settickets() {
        setticketsinit();
        render(BASE_PATH + "settickets.html");
    }

    public void savetickets() {
        String mids = getPara("mids");
        Integer tickets = getParaToInt("tickets", 0);
        if (tickets == 0) {
            renderJson(error("票数值错误"));
            return;
        }
        try {
            updateTickets(mids, tickets, null, false);

        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("修改失败"));
            return;
        }

        renderJson(success("修改成功"));
    }


    public void setbatchtickets() {
        setticketsinit();
        render(BASE_PATH + "setbatchtickets.html");
    }

    public void savebatchtickets() {
        String mids = getPara("mids");
        Integer mintickets = getParaToInt("tickets_min", 0);
        Integer maxtickets = getParaToInt("tickets_max", 0);
        if (mintickets == 0 && maxtickets == 0) {
            renderJson(error("票数值错误"));
            return;
        }
        try {
            updateTickets(mids, mintickets, maxtickets, true);

        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("调整失败"));
        }

        renderJson(success("调整成功"));
    }


    private void setticketsinit() {
        setAttr("code", CODE);
        String mids = getPara("mids");

        if (StringUtils.isNotEmpty(mids)) {
            setAttr("mids", mids);
        }
    }


    /**
     * 调整票数
     *
     * @param mids
     * @param mintickets
     */
    private void updateTickets(String mids, Integer mintickets, Integer maxtickets, Boolean isRandom) {
        String[] midarray = mids.split(",");
        Record record = Record.create();
        List<Merchant> merchantList = null;
        Event event = null;
        Integer tickets = mintickets;
        Integer hits=tickets;
        Random random = new Random();
        Record eRecord = Record.create();
        Record mRecord = Record.create();
        Merchant merchant = null;
        for (String mid : midarray) {
            merchant = merchantService.findById(mid);
            if (merchant != null) {
                try {
                    if (isRandom) {
                        tickets = mintickets + random.nextInt(maxtickets - mintickets + 1);
                    }
                    //人气是票数的0-4倍
                    hits=tickets+tickets*(random.nextInt(4));
                    //活动活动票数
                    eRecord.set("id", merchant.getEventid());
                    eRecord.set("tickets", tickets);
                    eRecord.set("hits",hits);
                    eventService.updateTicket(eRecord);
                    //选手票数
                    mRecord.set("id", merchant.getId());
                    mRecord.set("tickets", tickets);
                    eRecord.set("hits",hits);
                    merchantService.updateTicket(mRecord);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error(e.getMessage());
                }
            }


        }
    }

}
