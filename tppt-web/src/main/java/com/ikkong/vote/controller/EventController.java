package com.ikkong.vote.controller;

import com.ikkong.core.base.BaseController;
import com.ikkong.core.constant.Cst;
import com.ikkong.core.dao.Db;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.toolbox.Record;
import com.ikkong.core.toolbox.grid.JqGrid;
import com.ikkong.vote.model.Event;
import com.ikkong.vote.service.EventService;
import com.ikkong.vote.service.MerchantService;
import com.ikkong.vote.service.impl.EventServiceImpl;
import com.ikkong.vote.service.impl.MerchantServiceImpl;
import com.jfinal.kit.HttpKit;
import org.apache.commons.lang3.StringUtils;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Generated by Blade.
 * 2016-10-08 15:59:45
 */
public class EventController extends BaseController {
    private static String CODE = "event";
    private static String PERFIX = "event";
    private static String LIST_SOURCE = "Event.list";
    private static String LIST_SOURCE_DATA = "Event.listShow";
    private static String BASE_PATH = "/event/";
    private static String RECYCLE_PATH = "/eventrecycle/";

    EventService service = new EventServiceImpl();


    public void index() {
        setAttr("code", CODE);

        Object grid = getPage(null);
        setAttr("grid", grid);

        render(BASE_PATH + "list.html");
    }


    public void add() {
        setAttr("code", CODE);
        setAttr("userName", getUserName());
        Date now=new Date();
        Calendar calendar=Calendar.getInstance();
        calendar.setTime(now);
        calendar.add(Calendar.DATE,1);
        setAttr("now", calendar.getTime());

        calendar.add(Calendar.DATE,4);
        setAttr("endDate", calendar.getTime());


        render(BASE_PATH + "add.html");
    }

    public void edit() {
        String id = getPara(0);
        Event event = service.findById(id);
        if (event != null) {
            if (StringUtils.isNotEmpty(event.getPictures())) {
                String[] pictures = event.getPictures().split(",");
                setAttr("pictures", pictures);
            }
        }
        setAttr("model", event);
        setAttr("modelJson", JsonKit.toJson(event));
        setAttr("id", id);
        setAttr("code", CODE);
        render(BASE_PATH + "add.html");
    }

    public void view() {
        String id = getPara(0);
        Event event = service.findById(id);
        setAttr("model", event);
        setAttr("id", id);
        setAttr("code", CODE);
        render(BASE_PATH + "blog_view.html");
    }

    /**
     * 取分页内容
     */
    public void page() {
        Object grid = getPage(null);
        setAttr("grid", grid);
        render(BASE_PATH + "table.html");
    }

    /**
     * 分页取数据
     *
     * @return
     */
    private Object getPage(Integer delete_status) {
        Record record = Record.create();
        if(!isAdmin()) {
            record.set("deptid", getDeptId());
        }
        String status = getPara("status", "1").trim();
        String keystr = getPara("keystr", "").trim();
        String sortfield = getPara("sortfield", "");
        String sortDirection = getPara("sortDirection", "");
        switch (sortfield) {
            case "hits":
                sortfield="hits";
                break;
            case "totlevotes":
                sortfield="totlevotes";
                break;
            default:
                sortfield = " id ";
                break;
        }
        record.set("sortfield", sortfield);
        if (StringUtils.isNotBlank(sortfield)) {
            switch (sortDirection) {
                case "1":
                    sortDirection = "asc";
                    break;
                case "0":
                    sortDirection = "desc";
                    break;
                default:
                    sortDirection = "desc";
                    break;
            }
            record.set("sortDirection", sortDirection);
        }
        record.set("status", status);
        record.set("keystr", keystr);

        //删除状态
       if(delete_status!=null){
           record.set("delete_status", delete_status);
       }
        JqGrid<Map<String, Object>> grid=(JqGrid<Map<String, Object>>)paginate(LIST_SOURCE, record);
        record=Record.create();
        if(grid!=null) {
            StringBuilder ids = new StringBuilder();
            for (Map<String, Object> map : grid.getRows()) {
                ids.append(map.get("id"));
                ids.append(",");
            }
            if (ids.length() > 1) {
                record.set("ids", ids.substring(0, ids.length() - 1));
            } else {
                record.set("ids", -1);
            }
        }
        String sql= Db.init().getSql("Event.listShow");
        JqGrid<Map<String, Object>> grid2=(JqGrid<Map<String, Object>>)paginate(LIST_SOURCE_DATA, record,1);
        grid.setRows(grid2.getRows());
        return grid;
    }




    public void save() {
        Event event = mapping(PERFIX, Event.class);
        event.setVersion(1);
        event.setCreate_time(new Date());
        event.setUpdate_time(new Date());
        event.setCreatr_user_id(getUserId());
        event.setCreatr_user_name(getUserName());
        event.setStatus("1");
        try {
            boolean temp = service.save(event);
            if (temp) {
                renderJson(success(SAVE_SUCCESS_MSG));
            } else {
                renderJson(error(SAVE_FAIL_MSG));
            }
        }catch (Exception e){
            renderJson(error(e.getMessage()));
        }

    }

    public void update() {
        Event event = mapping(PERFIX, Event.class);
        event.setVersion(event.getVersion() + 1);
        event.setUpdate_user_id(getUserId());
        event.setUpdate_time(new Date());
        boolean temp = service.update(event);
        if (temp) {
            renderJson(success(UPDATE_SUCCESS_MSG));
        } else {
            renderJson(error(UPDATE_FAIL_MSG));
        }
    }

    public void remove() {
        Integer id = getParaToInt("id", 0);
        Record record = Record.create();
        record.set("id", id);
        record.set("eventid", id);
        int cnt = service.deleteById(record);

        if (cnt > 0) {
            MerchantService merchantService = new MerchantServiceImpl();
            merchantService.deleteByEventId(record);
            renderJson(success(DEL_SUCCESS_MSG));
        } else {
            renderJson(error(DEL_FAIL_MSG));
        }
    }



    public void recycle(){
        setAttr("code", CODE);
        Object grid = getPage(-1);
        setAttr("grid", grid);
        render(RECYCLE_PATH + "list.html");
    }


    /**
     * 取分页内容
     */
    public void recyclepage() {
        Object grid = getPage(-1);
        setAttr("grid", grid);
        render(RECYCLE_PATH + "table.html");
    }


    public void recycleevent() {
        Integer id = getParaToInt("id", 0);
        Record record = Record.create();
        record.set("id", id);
        record.set("eventid", id);
        int cnt = service.recycleById(record);
        if (cnt > 0) {
            MerchantService merchantService = new MerchantServiceImpl();
            merchantService.recycleByEventId(record);
            renderJson(success(RESTORE_SUCCESS_MSG));
        } else {
            renderJson(error(RESTORE_FAIL_MSG));
        }
    }

}
