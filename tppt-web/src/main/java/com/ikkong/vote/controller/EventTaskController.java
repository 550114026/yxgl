package com.ikkong.vote.controller;

import com.ikkong.core.base.BaseController;
import com.ikkong.core.dao.Db;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.toolbox.Record;
import com.ikkong.core.toolbox.grid.JqGrid;
import com.ikkong.vote.model.Event;
import com.ikkong.vote.model.Merchant;
import com.ikkong.vote.service.EventService;
import com.ikkong.vote.service.MerchantService;
import com.ikkong.vote.service.TaskService;
import com.ikkong.vote.service.impl.EventServiceImpl;
import com.ikkong.vote.service.impl.MerchantServiceImpl;
import com.ikkong.vote.service.impl.TaskServiceImpl;
import com.jfinal.log.Log;
import org.apache.commons.lang3.StringUtils;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Generated by Blade.
 * 2018-10-18 20:49:32
 */
public class EventTaskController extends BaseController {
    Log logger = Log.getLog(EventTaskController.class);
    private static String CODE = "eventTask";
    private static String PERFIX = "t_event";
    private static String LIST_SOURCE_DATA = "Event.listShow";
    private static String LIST_SOURCE = "Event.list";
    private static String BASE_PATH = "/eventtask/";

    TaskService service = new TaskServiceImpl();
    EventService eventService = new EventServiceImpl();
    MerchantService merchantService = new MerchantServiceImpl();

    public void index() {
        setAttr("code", CODE);
        Date today=new Date();
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        setAttr("begindate",sdf.format(today));

        Calendar calendar=Calendar.getInstance();
        calendar.setTime(today);
        calendar.add(Calendar.DATE,5);
        setAttr("enddate",sdf.format(calendar.getTime()));

        render(BASE_PATH + "event.html");
    }


    public void view() {
        String id = getPara(0);
        Event event = eventService.findById(id);
        setAttr("model", JsonKit.toJson(event));
        setAttr("id", id);
        setAttr("code", CODE);
        render(BASE_PATH + "event_view.html");
    }

    public void list() {
        Record record = Record.create();
        if(!isAdmin()) {
            record.set("deptid", getDeptId());
        }
        String status = getPara("status", "1");
        String keystr = getPara("keystr", "");
        if (StringUtils.isNotEmpty(keystr)) {
            try {
                keystr = java.net.URLDecoder.decode(keystr, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }
        String startDate = getPara("startDate");
        String endDate = getPara("endDate");
        record.set("status", status);
        record.set("keystr", keystr.trim());
        record.set("startDate", startDate);
        record.set("endDate", endDate);

        String sidx = getPara("sidx", "");
        String sord = getPara("sord", "");
        record.set("sortfield",sidx);
        record.set("sortDirection",sord);

        JqGrid<Map<String, Object>> grid=(JqGrid<Map<String, Object>>)paginate(LIST_SOURCE, record);
        record=Record.create();
        if(grid!=null) {
            StringBuilder ids = new StringBuilder();
            for (Map<String, Object> map : grid.getRows()) {
                ids.append(map.get("id"));
                ids.append(",");
            }
            if (ids.length() > 1) {
                record.set("ids", ids.substring(0, ids.length() - 1));
            } else {
                record.set("ids", -1);
            }
        }
        String sql= Db.init().getSql("Event.listShow");
        JqGrid<Map<String, Object>> grid2=(JqGrid<Map<String, Object>>)paginate(LIST_SOURCE_DATA, record,1);
        grid.setRows(grid2.getRows());
        renderJson(grid);
    }


    public void update() {
        Event event = mapping(PERFIX, Event.class);
        event.setVersion(event.getVersion() + 1);
        boolean temp = eventService.update(event);
        if (temp) {
            renderJson(success(UPDATE_SUCCESS_MSG));
        } else {
            renderJson(error(UPDATE_FAIL_MSG));
        }
    }

    public void remove() {
        String ids = getPara("ids");
        int cnt = eventService.deleteByIds(ids);
        if (cnt > 0) {
            renderJson(success(DEL_SUCCESS_MSG));
        } else {
            renderJson(error(DEL_FAIL_MSG));
        }
    }


    public void settickets() {
        setticketsinit();
        render(BASE_PATH + "settickets.html");
    }

    public void savetickets() {
        String eids = getPara("eids");
        Integer tickets = getParaToInt("tickets", 0);
        if(tickets==0){
            renderJson(error("票数错误"));
            return ;
        }
        try {
            updateTickets(eids, tickets,null,false);

        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("修改失败"));
            return ;
        }

        renderJson(success("修改成功"));
    }


    public void setbatchtickets() {
        setticketsinit();
        render(BASE_PATH + "setbatchtickets.html");
    }

    public void savebatchtickets() {
        String eids = getPara("eids");
        Integer mintickets = getParaToInt("tickets_min", 0);
        Integer maxtickets = getParaToInt("tickets_max", 0);
        if(mintickets==0&&maxtickets==0){
            renderJson(error("票数错误"));
            return ;
        }
        try {
            updateTickets(eids, mintickets,maxtickets,true);

        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("调整失败"));
        }

        renderJson(success("调整成功"));
    }


    private void setticketsinit() {
        setAttr("code", CODE);
        String eids = getPara("eids");
        String mids = getPara("mids");

        if (StringUtils.isNotEmpty(eids)) {
            setAttr("t", 1);
            setAttr("eids", eids);
        } else if (StringUtils.isNotEmpty(mids)) {
            setAttr("mids", mids);
            setAttr("t", 2);
        }
    }


    /**
     * 调整票数
     * @param eids
     * @param mintickets
     */
    private void updateTickets(String eids, Integer mintickets, Integer maxtickets,Boolean isRandom) {
        String[] eidarray = eids.split(",");
        Record record = Record.create();
        List<Merchant> merchantList = null;
        Event event = null;
        Integer tickets=mintickets;
        Integer hits=tickets;
        Random random=new Random();
        Record eRecord= Record.create();
        Record mRecord= Record.create();
        for (String eid : eidarray) {
            record.set("eventid", eid);
            event = eventService.findById(eid);
            if (event == null) {
                continue;
            }
            if (event.getTotlevotes() == null) {
                event.setTotlevotes(0);
            }
            merchantList = merchantService.queryList(record);
            if (merchantList != null && merchantList.size() > 0) {
                for (Merchant merchant : merchantList) {
                    if(isRandom){
                        tickets=mintickets+random.nextInt(maxtickets-mintickets+1);
                    }

                    //人气是票数的0-4倍
                    hits=tickets+tickets*(random.nextInt(4));
                    try {
                        //活动活动票数
                        eRecord.set("id",event.getId());
                        eRecord.set("tickets",tickets);
                        eRecord.set("hits",hits);
                        eventService.updateTicket(eRecord);
                        //选手票数
                        mRecord.set("id",merchant.getId());
                        mRecord.set("tickets",tickets);
                        mRecord.set("hits",hits);
                        merchantService.updateTicket(mRecord);

                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error(e.getMessage());
                    }
                }
            }


        }
    }

    public void deleteTask(){
        String eids = getPara("eids");

        if (StringUtils.isBlank(eids)) {
            renderJson(error("要删除任务的活动参数错误"));
            return;
        }
        try {
        Record record=Record.create();
        record.set("eids",eids);
        service.deleteTask(record);

        }catch (Exception e){
            renderJson(error("删除任务失败！"));
            return ;
        }
        renderJson(success("删除任务成功"));

    }



    public void sethits() {
        setticketsinit();
        render(BASE_PATH + "sethits.html");
    }

    public void savehits() {
        String eids = getPara("eids");
        Integer tickets = getParaToInt("tickets", 0);
        if(tickets==0){
            renderJson(error("人气数错误"));
            return ;
        }
        try {
            updateHits(eids, tickets,null,false);

        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("修改失败"));
            return ;
        }

        renderJson(success("修改成功"));
    }


    public void setbatchhits() {
        setticketsinit();
        render(BASE_PATH + "setbatchhits.html");
    }

    public void savebatchhits() {
        String eids = getPara("eids");
        Integer mintickets = getParaToInt("tickets_min", 0);
        Integer maxtickets = getParaToInt("tickets_max", 0);
        if(mintickets==0&&maxtickets==0){
            renderJson(error("人气数错误"));
            return ;
        }
        try {
            updateHits(eids, mintickets,maxtickets,true);
        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("调整失败"));
        }

        renderJson(success("调整成功"));
    }

    /**
     * 调整票数
     * @param eids
     * @param minhits
     */
    private void updateHits(String eids, Integer minhits, Integer maxhits, Boolean isRandom) {
        String[] eidarray = eids.split(",");
        Record record = Record.create();
        List<Merchant> merchantList = null;
        Event event = null;
        Integer hits= minhits;
        Random random=new Random();
        Record eRecord= Record.create();
        for (String eid : eidarray) {
            record.set("eventid", eid);
            event = eventService.findById(eid);
            if (event == null) {
                continue;
            }
            if (event.getTotlevotes() == null) {
                event.setTotlevotes(0);
            }
            if(isRandom){
                hits= minhits +random.nextInt(maxhits - minhits +1);
            }
            //活动活动票数
            eRecord.set("id",event.getId());
            eRecord.set("hits",hits);
            eventService.updateHits(eRecord);



        }
    }



    public void addvotemine() {

        setAttr("code", CODE);
        String eids = getPara("eids");
        if(eids.startsWith(",")){
            eids=eids.substring(1,eids.length());
        }
        if (StringUtils.isNotEmpty(eids)) {
            setAttr("t", 1);
            setAttr("eids", eids);
        }
        render(BASE_PATH + "addvotemine.html");
    }

    public void updatevotemine() {
        String eids = getPara("eids");
        Integer minutes = getParaToInt("minutes", 0);
        if(minutes==0){
            renderJson(error("秒数错误"));
            return ;
        }
        try {
           eventService.updateVoteEndTimebyIds(minutes,eids);

        } catch (Exception e) {
            e.printStackTrace();
            renderJson(error("调整失败"));
        }

        renderJson(success("调整成功"));
    }

}
