package com.ikkong.vote.service.impl;

import com.ikkong.core.base.service.impl.BaseService;
import com.ikkong.core.dao.Db;
import com.ikkong.core.toolbox.Record;
import com.ikkong.vote.model.Event;
import com.ikkong.vote.service.EventService;

/**
 * Generated by Blade.
 * 2018-08-26 00:46:42
 */
public class EventServiceImpl extends BaseService<Event> implements EventService {
    @Override
    public int deleteById(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_event set status=-1 where id=#{id} ");
        if(record.containsKey("userid")){
            sql.append(" and creatr_user_id=#{id} ");
        }
        return Db.init().update(sql.toString(), record);
    }

    @Override
    public void updateTicket(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_event  " +
                " set totlevotes=case when (IFNULL(totlevotes, 0) + #{tickets})<0 then vipvotes else IFNULL(totlevotes, 0) + #{tickets} end ," +
                " hits=case when (IFNULL(hits, 0) + #{hits})<0 then vipvotes else IFNULL(hits, 0) + #{hits} end  " +
                " where id=#{id} ");
//        if(record.containsKey("userid")){
//            sql.append(" and creatr_user_id=#{id} ");
//        }
        Db.init().update(sql.toString(), record);
    }

    @Override
    public void updateHits(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_event  " +
                " set  hits=case when (IFNULL(hits, 0) + #{hits})<0 then vipvotes else IFNULL(hits, 0) + #{hits} end  " +
                " where id=#{id} ");
//        if(record.containsKey("userid")){
//            sql.append(" and creatr_user_id=#{id} ");
//        }
        Db.init().update(sql.toString(), record);
    }


    @Override
    public int recycleById(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_event set status=1 where id=#{id} ");
//        if(record.containsKey("userid")){
//            sql.append(" and creatr_user_id=#{id} ");
//        }
        return Db.init().update(sql.toString(), record);
    }

    @Override
    public int countEvent(Record record){
       String sql= Db.init().getSql("Event.countevent");
        return Db.init().queryInt(sql,record);
    }


    @Override
    public int updateVoteEndTimebyIds(Integer seconds,String ids) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_event set voteendtime=date_add(voteendtime, interval #{seconds} second) where id in (#{text(ids)}) ");

        Record record = Record.create();
        record.set("seconds",seconds);
        record.set("ids",ids);
        return Db.init().update(sql.toString(), record);
    }

}
