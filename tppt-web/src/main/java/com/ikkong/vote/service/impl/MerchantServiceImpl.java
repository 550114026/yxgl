package com.ikkong.vote.service.impl;

import com.ikkong.core.base.service.impl.BaseService;
import com.ikkong.core.dao.Db;
import com.ikkong.core.toolbox.Record;
import com.ikkong.vote.model.Merchant;
import com.ikkong.vote.service.MerchantService;

import java.util.List;

/**
 * Generated by Blade.
 * 2018-08-26 00:46:42
 */
public class MerchantServiceImpl extends BaseService<Merchant> implements MerchantService {

    @Override
    public int deleteByEventId(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_merchant set status=-1 where eventid=#{eventid} ");
        return Db.init().update(sql.toString(), record);
    }

    @Override
    public int deleteById(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_merchant set status=-1,update_time=now() where id=#{id} ");
       Integer rows=  Db.init().update(sql.toString(), record);
         //修改后续
        sql= new StringBuilder();
        sql.append(" update t_merchant set indexno=indexno-1 where eventid=#{eventid} and indexno>#{indexno} " +
                "and exists(select 1 from t_event e where e.id=#{eventid} and  (now()<e.votebegintime ))");
         Db.init().update(sql.toString(), record);
        return rows;
    }
    @Override
    public List<Merchant> queryList(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select * from  t_merchant  " +
                "where eventid=#{eventid} ");
        return super.find(sql.toString(), record);
    }

    @Override
    public void updateTicket(Record record) {

        StringBuilder sql = new StringBuilder();
        sql.append(" update t_merchant " +
                " set totlevotes=case when (IFNULL(totlevotes, 0) + #{tickets})<0 then vipvotes else IFNULL(totlevotes, 0) + #{tickets} end ," +
                " hits=case when (IFNULL(hits, 0) + #{hits})<0 then vipvotes else IFNULL(hits, 0) + #{hits} end  " +
                " where id=#{id} ");
        Db.init().update(sql.toString(), record);
    }

    @Override
    public void updateHits( Record record){
    StringBuilder sql = new StringBuilder();
        sql.append(" update t_merchant " +
                " set  hits=case when (IFNULL(hits, 0) + #{hits})<0 then vipvotes else IFNULL(hits, 0) + #{hits} end  " +
                " where id=#{id} ");
        Db.init().update(sql.toString(), record);
}

    @Override
    public int recycleByEventId(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append(" update t_merchant set status=1 where eventid=#{eventid} ");
        return Db.init().update(sql.toString(), record);
    }

    @Override
    public int recycleById(Record record) {
        StringBuilder sql = new StringBuilder();
        sql.append("  update t_merchant m \n " +
                " inner join ( \n " +
                " select max(indexno) as maxindexno \n " +
                " FROM t_merchant s \n " +
                " where s.eventid=#{eventid} and s.status=1\n " +
                " ) mm\n " +
                " set m.indexno=maxindexno+1,m.status=1\n " +
                " where m.id=#{id} ");

        return Db.init().update(sql.toString(), record);
    }




}
