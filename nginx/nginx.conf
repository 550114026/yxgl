
user root;
worker_processes  2;
worker_cpu_affinity 0101 1010;

worker_rlimit_nofile 65535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  /dev/null;


#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    server_tokens off;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';


     upstream mt {
        ip_hash;
        #sticky;
        server 127.0.0.1:8080 max_fails=2 fail_timeout=30s;
    }

    upstream mtm {
        ip_hash;
        #sticky;
        server 127.0.0.1:8080 max_fails=2 fail_timeout=30s;
    }

    sendfile        on;
    tcp_nopush     on;
    client_max_body_size  20m;
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 32k;
    gzip_http_version 1.1;
    gzip_comp_level 9;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png image/jpg;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";		

  #限速，每秒20个,内存区域10m，大概16万个session
# limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;   
 server {
        listen       80;
        server_name  localhost;
        
        #charset koi8-r;

       # access_log  logs/host.access.log  main;
	#access_log /dev/null;
           


        #图片访问
        location /images/ {
            root   /root/tppt;
            autoindex on;
	    expires 30d;
        }
        location / {
            root   /root/tppt/mp;
            autoindex on;
        }
		
    #微信端
	location /mt {
            proxy_pass http://mt;
            
	    #缓存区队列burst=100个,不延期，即每秒最多可处理rate+burst个.同时处理rate个。
	   # limit_req zone=one burst=20 nodelay;	
	
	    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #以下是一些反向代理的配置，可选。
            proxy_set_header Host $host;

            #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout 3000; 

            #后端服务器数据回传时间(代理发送超时)
            proxy_send_timeout 3000; 

            #连接成功后，后端服务器响应时间(代理接收超时)
            proxy_read_timeout 3000; 

            #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffer_size 4k; 

            #proxy_buffers缓冲区，网页平均在32k以下的设置
            proxy_buffers 4 32k; 

            #高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size 64k; 

            #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k;

	    

        }

        #web管理台
        location /mtm {
            proxy_pass http://mtm;
	    #缓存区队列burst=100个,不延期，即每秒最多可处理rate+burst个.同时处理rate个。
          #  limit_req zone=one burst=50 nodelay;
            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #以下是一些反向代理的配置，可选。
            proxy_set_header Host $host;

            #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout 3000; 

            #后端服务器数据回传时间(代理发送超时)
            proxy_send_timeout 3000; 

            #连接成功后，后端服务器响应时间(代理接收超时)
            proxy_read_timeout 3000; 

            #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffer_size 4k; 

            #proxy_buffers缓冲区，网页平均在32k以下的设置
            proxy_buffers 4 32k; 

            #高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size 64k; 

            #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k;
        }
        







        #location /vote/ {
        #    proxy_pass  http://localhost:8080/vote;
        #    proxy_set_header Host $host;
	#    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
        #    root   /app/esop_web/esopschool;
        #    index  index.html;
        #    try_files $uri $uri/ /index.html;
        #}
        #location /web/{
        #    proxy_pass http://localhost:8080/web;
        #    proxy_set_header   Host    $host;
        #    proxy_set_header   X-Real-IP   $remote_addr;
        #    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
